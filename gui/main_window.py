#!/usr/bin/env python3
"""
Ventana principal de SIGeC-Balistica
Interfaz moderna con tabs para an√°lisis, comparaci√≥n, base de datos y reportes
"""

import sys
import os
from typing import Optional
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTabWidget,
    QMenuBar, QStatusBar, QAction, QMessageBox, QSplitter,
    QFrame, QLabel, QPushButton, QApplication, QToolBar
)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QIcon, QFont, QPixmap

# Importar configuraci√≥n existente
try:
    from unified_config import GUIConfig
except ImportError:
    # Configuraci√≥n por defecto si no existe
    class GUIConfig:
        WINDOW_WIDTH = 1200
        WINDOW_HEIGHT = 800
        WINDOW_TITLE = "SIGeC-Balistica- Sistema de An√°lisis Forense"
        THEME = "modern"
        LANGUAGE = "es"

# Importar estilos y widgets
from .styles import SIGeCBallisticaTheme, apply_SIGeC_Balistica_theme
from .shared_widgets import StepIndicator, ProgressCard
from .settings_dialog import SettingsDialog
from .history_dialog import HistoryDialog
from .help_dialog import HelpDialog
from .about_dialog import AboutDialog

class MainWindow(QMainWindow):
    """Ventana principal de la aplicaci√≥n SIGeC-Balistica"""
    
    # Se√±ales para comunicaci√≥n entre componentes
    analysisRequested = pyqtSignal(dict)
    comparisonRequested = pyqtSignal(dict)
    databaseSearchRequested = pyqtSignal(dict)
    reportGenerationRequested = pyqtSignal(dict)
    
    def __init__(self):
        super().__init__()
        self.theme = SIGeC-BalisticaTheme()
        self.current_analysis = None
        self.setup_ui()
        self.setup_menu_bar()
        self.setup_status_bar()
        self.setup_connections()
        
    def setup_ui(self):
        """Configura la interfaz principal"""
        # Configuraci√≥n de ventana
        self.setWindowTitle(GUIConfig.WINDOW_TITLE)
        self.setMinimumSize(1000, 700)
        self.resize(GUIConfig.WINDOW_WIDTH, GUIConfig.WINDOW_HEIGHT)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Header con informaci√≥n del sistema
        self.setup_header()
        main_layout.addWidget(self.header_frame)
        
        # Tabs principales
        self.setup_tabs()
        main_layout.addWidget(self.tab_widget)
        
    def setup_header(self):
        """Configura el header con informaci√≥n del sistema"""
        self.header_frame = QFrame()
        self.header_frame.setProperty("class", "header")
        self.header_frame.setFixedHeight(60)
        
        header_layout = QHBoxLayout(self.header_frame)
        header_layout.setContentsMargins(20, 10, 20, 10)
        
        # Logo y t√≠tulo
        title_layout = QHBoxLayout()
        
        # Logo (placeholder)
        logo_label = QLabel("üî¨")
        logo_label.setStyleSheet("font-size: 24px;")
        title_layout.addWidget(logo_label)
        
        # T√≠tulo y subt√≠tulo
        title_container = QVBoxLayout()
        title_container.setSpacing(0)
        
        title_label = QLabel("SIGeC-Balistica")
        title_label.setProperty("class", "title")
        title_container.addWidget(title_label)
        
        subtitle_label = QLabel("Sistema de An√°lisis Forense de Im√°genes")
        subtitle_label.setProperty("class", "caption")
        title_container.addWidget(subtitle_label)
        
        title_layout.addLayout(title_container)
        header_layout.addLayout(title_layout)
        
        # Spacer
        header_layout.addStretch()
        
        # Informaci√≥n del sistema
        system_info_layout = QVBoxLayout()
        system_info_layout.setSpacing(0)
        system_info_layout.setAlignment(Qt.AlignRight)
        
        # Estado del sistema
        self.system_status_label = QLabel("Sistema Listo")
        self.system_status_label.setProperty("class", "caption success")
        system_info_layout.addWidget(self.system_status_label)
        
        # Informaci√≥n adicional
        self.system_info_label = QLabel("Base de Datos: Conectada")
        self.system_info_label.setProperty("class", "caption")
        system_info_layout.addWidget(self.system_info_label)
        
        header_layout.addLayout(system_info_layout)
        
    def setup_tabs(self):
        """Configura las pesta√±as principales"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setProperty("class", "main-tabs")
        
        # Importar pesta√±as reales
        try:
            from .analysis_tab import AnalysisTab
            from .comparison_tab import ComparisonTab
            from .database_tab import DatabaseTab
            from .reports_tab import ReportsTab
            
            # Crear pesta√±as reales
            self.analysis_tab = AnalysisTab()
            self.comparison_tab = ComparisonTab()
            self.database_tab = DatabaseTab()
            self.reports_tab = ReportsTab()
            
        except ImportError as e:
            print(f"Error importando pesta√±as: {e}")
            # Fallback a pesta√±as placeholder
            self.analysis_tab = self.create_placeholder_tab(
                "An√°lisis Individual",
                "Procesar y analizar una imagen individual",
                "üîç"
            )
            
            self.comparison_tab = self.create_placeholder_tab(
                "An√°lisis Comparativo", 
                "Comparar dos im√°genes o buscar en base de datos",
                "‚öñÔ∏è"
            )
            
            self.database_tab = self.create_placeholder_tab(
                "Base de Datos",
                "Explorar y gestionar la base de datos de im√°genes",
                "üóÑÔ∏è"
            )
            
            self.reports_tab = self.create_placeholder_tab(
                "Reportes",
                "Generar reportes profesionales de an√°lisis",
                "üìä"
            )
        
        # A√±adir pesta√±as
        self.tab_widget.addTab(self.analysis_tab, "üîç An√°lisis")
        self.tab_widget.addTab(self.comparison_tab, "‚öñÔ∏è Comparaci√≥n")
        self.tab_widget.addTab(self.database_tab, "üóÑÔ∏è Base de Datos")
        self.tab_widget.addTab(self.reports_tab, "üìä Reportes")
        
        # Conectar cambio de pesta√±a
        self.tab_widget.currentChanged.connect(self.on_tab_changed)
        
    def create_placeholder_tab(self, title: str, description: str, icon: str) -> QWidget:
        """Crea una pesta√±a placeholder temporal"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(20)
        
        # Icono grande
        icon_label = QLabel(icon)
        icon_label.setAlignment(Qt.AlignCenter)
        icon_label.setStyleSheet("font-size: 64px; margin: 20px;")
        layout.addWidget(icon_label)
        
        # T√≠tulo
        title_label = QLabel(title)
        title_label.setProperty("class", "title")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Descripci√≥n
        desc_label = QLabel(description)
        desc_label.setProperty("class", "body")
        desc_label.setAlignment(Qt.AlignCenter)
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        # Estado
        status_label = QLabel("En desarrollo...")
        status_label.setProperty("class", "caption")
        status_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(status_label)
        
        return tab
        
    def setup_menu_bar(self):
        """Configura la barra de men√∫"""
        menubar = self.menuBar()
        
        # Men√∫ Archivo
        file_menu = menubar.addMenu("&Archivo")
        
        new_action = QAction("&Nuevo An√°lisis", self)
        new_action.setShortcut("Ctrl+N")
        new_action.triggered.connect(self.new_analysis)
        file_menu.addAction(new_action)
        
        open_action = QAction("&Abrir Proyecto", self)
        open_action.setShortcut("Ctrl+O")
        open_action.triggered.connect(self.open_project)
        file_menu.addAction(open_action)
        
        save_action = QAction("&Guardar", self)
        save_action.setShortcut("Ctrl+S")
        save_action.triggered.connect(self.save_project)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("&Salir", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Men√∫ Herramientas
        tools_menu = menubar.addMenu("&Herramientas")
        
        backup_action = QAction("&Respaldo de Base de Datos", self)
        backup_action.setShortcut("Ctrl+B")
        backup_action.triggered.connect(self.backup_database)
        tools_menu.addAction(backup_action)
        
        tools_menu.addSeparator()
        
        history_action = QAction("&Historial de An√°lisis", self)
        history_action.setShortcut("Ctrl+H")
        history_action.triggered.connect(self.show_history)
        tools_menu.addAction(history_action)
        
        tools_menu.addSeparator()
        
        preferences_action = QAction("&Configuraci√≥n", self)
        preferences_action.setShortcut("Ctrl+,")
        preferences_action.triggered.connect(self.show_preferences)
        tools_menu.addAction(preferences_action)
        
        database_action = QAction("Gesti√≥n de &Base de Datos", self)
        database_action.triggered.connect(self.show_database_management)
        tools_menu.addAction(database_action)
        
        # Men√∫ Ayuda
        help_menu = menubar.addMenu("A&yuda")
        
        user_guide_action = QAction("&Gu√≠a de Usuario", self)
        user_guide_action.setShortcut("F1")
        user_guide_action.triggered.connect(self.show_user_guide)
        help_menu.addAction(user_guide_action)
        
        help_action = QAction("&Ayuda Completa", self)
        help_action.setShortcut("Ctrl+F1")
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)
        
        help_menu.addSeparator()
        
        support_action = QAction("&Soporte T√©cnico", self)
        support_action.triggered.connect(self.show_support)
        help_menu.addAction(support_action)
        
        help_menu.addSeparator()
        
        about_action = QAction("&Acerca de SIGeC-Balistica", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
    def setup_status_bar(self):
        """Configura la barra de estado"""
        self.status_bar = self.statusBar()
        
        # Mensaje principal
        self.status_bar.showMessage("Listo")
        
        # Widgets adicionales en la barra de estado
        self.progress_label = QLabel("Inactivo")
        self.progress_label.setProperty("class", "caption")
        self.status_bar.addPermanentWidget(self.progress_label)
        
        # Informaci√≥n de memoria/rendimiento
        self.performance_label = QLabel("Memoria: OK")
        self.performance_label.setProperty("class", "caption")
        self.status_bar.addPermanentWidget(self.performance_label)
        
        # Timer para actualizar informaci√≥n del sistema
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.update_system_status)
        self.status_timer.start(5000)  # Actualizar cada 5 segundos
        
    def setup_connections(self):
        """Configura las conexiones de se√±ales"""
        # Conectar se√±ales de an√°lisis (se implementar√°n cuando est√©n las pesta√±as)
        pass
        
    def on_tab_changed(self, index: int):
        """Maneja el cambio de pesta√±a"""
        tab_names = ["An√°lisis", "Comparaci√≥n", "Base de Datos", "Reportes"]
        if 0 <= index < len(tab_names):
            self.status_bar.showMessage(f"Pesta√±a activa: {tab_names[index]}")
            
    def update_system_status(self):
        """Actualiza el estado del sistema"""
        try:
            # Aqu√≠ se podr√≠a verificar el estado real del sistema
            # Por ahora, simulamos informaci√≥n b√°sica
            import psutil
            memory_percent = psutil.virtual_memory().percent
            
            if memory_percent < 80:
                self.performance_label.setText(f"Memoria: {memory_percent:.1f}% OK")
                self.performance_label.setProperty("class", "caption success")
            else:
                self.performance_label.setText(f"Memoria: {memory_percent:.1f}% Alta")
                self.performance_label.setProperty("class", "caption warning")
                
            # Forzar actualizaci√≥n de estilo
            self.performance_label.style().unpolish(self.performance_label)
            self.performance_label.style().polish(self.performance_label)
            
        except ImportError:
            # Si psutil no est√° disponible
            self.performance_label.setText("Memoria: N/A")
            
    def new_analysis(self):
        """Inicia un nuevo an√°lisis"""
        self.tab_widget.setCurrentIndex(0)  # Ir a pesta√±a de an√°lisis
        self.status_bar.showMessage("Nuevo an√°lisis iniciado")
        
    def open_project(self):
        """Abre un proyecto existente"""
        # Placeholder - implementar cuando est√© el backend
        QMessageBox.information(self, "Informaci√≥n", "Funcionalidad en desarrollo")
        
    def save_project(self):
        """Guarda el proyecto actual"""
        # Placeholder - implementar cuando est√© el backend
        QMessageBox.information(self, "Informaci√≥n", "Funcionalidad en desarrollo")
        
    def show_configuration(self):
        """Muestra el di√°logo de configuraci√≥n"""
        # Placeholder - implementar cuando est√© el di√°logo
        QMessageBox.information(self, "Informaci√≥n", "Configuraci√≥n en desarrollo")
        
    def show_database_management(self):
        """Muestra la gesti√≥n de base de datos"""
        self.tab_widget.setCurrentIndex(2)  # Ir a pesta√±a de base de datos
        
    def backup_database(self):
        """Realiza respaldo de la base de datos"""
        try:
            from PyQt5.QtWidgets import QFileDialog, QMessageBox, QProgressDialog
            from PyQt5.QtCore import QThread, pyqtSignal
            import shutil
            import os
            from datetime import datetime
            
            # Seleccionar ubicaci√≥n de respaldo
            backup_path, _ = QFileDialog.getSaveFileName(
                self,
                "Guardar Respaldo de Base de Datos",
                f"SIGeC-Balistica_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db",
                "Base de Datos (*.db);;Todos los archivos (*)"
            )
            
            if backup_path:
                # Crear di√°logo de progreso
                progress = QProgressDialog("Creando respaldo...", "Cancelar", 0, 0, self)
                progress.setWindowModality(Qt.WindowModal)
                progress.show()
                
                try:
                    # Obtener ruta de la base de datos actual
                    db_path = self.backend.get_database_path()
                    
                    # Copiar archivo
                    shutil.copy2(db_path, backup_path)
                    
                    progress.close()
                    QMessageBox.information(
                        self,
                        "√âxito",
                        f"Respaldo creado exitosamente:\n{backup_path}"
                    )
                    
                except Exception as e:
                    progress.close()
                    QMessageBox.critical(
                        self,
                        "Error",
                        f"Error creando respaldo:\n{str(e)}"
                    )
                    
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error en respaldo de base de datos:\n{str(e)}"
            )
    
    def show_history(self):
        """Muestra el historial de an√°lisis"""
        try:
            dialog = HistoryDialog(self)
            dialog.exec_()
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error mostrando historial:\n{str(e)}"
            )
    
    def show_preferences(self):
        """Muestra el di√°logo de configuraci√≥n"""
        try:
            dialog = SettingsDialog(self)
            if dialog.exec_() == QDialog.Accepted:
                # Aplicar configuraciones si fueron aceptadas
                self.apply_new_settings()
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error mostrando configuraci√≥n:\n{str(e)}"
            )
    
    def show_user_guide(self):
        """Muestra la gu√≠a de usuario"""
        try:
            dialog = HelpDialog(self)
            dialog.tab_widget.setCurrentIndex(0)  # Pesta√±a de gu√≠a de usuario
            dialog.show()
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error mostrando gu√≠a de usuario:\n{str(e)}"
            )
    
    def show_help(self):
        """Muestra la ayuda completa"""
        try:
            dialog = HelpDialog(self)
            dialog.show()
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error mostrando ayuda:\n{str(e)}"
            )
    
    def show_support(self):
        """Muestra el soporte t√©cnico"""
        try:
            dialog = HelpDialog(self)
            dialog.tab_widget.setCurrentIndex(4)  # Pesta√±a de soporte t√©cnico
            dialog.show()
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error mostrando soporte t√©cnico:\n{str(e)}"
            )
    
    def show_about(self):
        """Muestra informaci√≥n acerca de la aplicaci√≥n"""
        try:
            dialog = AboutDialog(self)
            dialog.exec_()
        except Exception as e:
            QMessageBox.critical(
                self,
                "Error",
                f"Error mostrando informaci√≥n:\n{str(e)}"
            )
    
    def apply_new_settings(self):
        """Aplica nuevas configuraciones"""
        try:
            # Recargar configuraci√≥n del backend
            self.backend.reload_configuration()
            
            # Actualizar tema si cambi√≥
            apply_SIGeC-Balistica_theme(self)
            
            # Notificar a las pesta√±as sobre cambios de configuraci√≥n
            for i in range(self.tab_widget.count()):
                tab = self.tab_widget.widget(i)
                if hasattr(tab, 'on_settings_changed'):
                    tab.on_settings_changed()
            
            self.status_bar.showMessage("Configuraci√≥n aplicada exitosamente", 3000)
            
        except Exception as e:
            QMessageBox.warning(
                self,
                "Advertencia",
                f"Algunas configuraciones no pudieron aplicarse:\n{str(e)}"
            )
        
    def set_analysis_progress(self, progress: int, message: str = ""):
        """Actualiza el progreso de an√°lisis"""
        if progress >= 0:
            self.progress_label.setText(f"Progreso: {progress}%")
            if message:
                self.status_bar.showMessage(message)
        else:
            self.progress_label.setText("Inactivo")
            
    def show_error(self, title: str, message: str):
        """Muestra un mensaje de error"""
        QMessageBox.critical(self, title, message)
        
    def show_warning(self, title: str, message: str):
        """Muestra un mensaje de advertencia"""
        QMessageBox.warning(self, title, message)
        
    def show_info(self, title: str, message: str):
        """Muestra un mensaje informativo"""
        QMessageBox.information(self, title, message)
        
    def closeEvent(self, event):
        """Maneja el evento de cierre de la aplicaci√≥n"""
        reply = QMessageBox.question(
            self,
            "Confirmar Salida",
            "¬øEst√° seguro de que desea salir?\n\nSe perder√°n los cambios no guardados.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # Limpiar recursos si es necesario
            if hasattr(self, 'status_timer'):
                self.status_timer.stop()
            event.accept()
        else:
            event.ignore()

def main():
    """Funci√≥n principal para ejecutar la aplicaci√≥n"""
    app = QApplication(sys.argv)
    
    # Aplicar tema
    apply_SIGeC-Balistica_theme(app)
    
    # Crear y mostrar ventana principal
    window = MainWindow()
    window.show()
    
    return app.exec_()

if __name__ == "__main__":
    sys.exit(main())