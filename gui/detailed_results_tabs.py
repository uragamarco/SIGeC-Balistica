"""
Pesta√±as detalladas para organizaci√≥n mejorada de resultados de an√°lisis bal√≠stico
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTabWidget,
                             QLabel, QPushButton, QFrame, QScrollArea, 
                             QGroupBox, QFormLayout, QTextEdit, QTableWidget,
                             QTableWidgetItem, QHeaderView, QSplitter,
                             QProgressBar, QCheckBox, QComboBox)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QColor

from .shared_widgets import ResultCard, CollapsiblePanel
from .graphics_widgets import (HistogramWidget, HeatmapWidget, 
                              RadarChartWidget, GraphicsVisualizationPanel)


class DetailedFeaturesTab(QFrame):
    """Pesta√±a detallada para caracter√≠sticas bal√≠sticas extra√≠das"""
    
    def __init__(self, results: dict, parent=None):
        super().__init__(parent)
        self.results = results
        self.setProperty("class", "card")
        self.setup_ui()
        
    def setup_ui(self):
        """Configura la interfaz de caracter√≠sticas detalladas"""
        layout = QVBoxLayout(self)
        
        # T√≠tulo principal
        title_label = QLabel("üìä An√°lisis Detallado de Caracter√≠sticas")
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #333; padding: 10px; background-color: #e8f4fd; border-radius: 5px;")
        layout.addWidget(title_label)
        
        # Splitter para organizar contenido
        splitter = QSplitter(Qt.Horizontal)
        
        # Panel izquierdo - Lista de caracter√≠sticas
        left_panel = self.create_features_list_panel()
        splitter.addWidget(left_panel)
        
        # Panel derecho - Visualizaciones
        right_panel = self.create_visualizations_panel()
        splitter.addWidget(right_panel)
        
        # Configurar proporciones del splitter
        splitter.setSizes([400, 600])
        layout.addWidget(splitter)
        
        # Panel de estad√≠sticas resumidas
        stats_panel = self.create_statistics_panel()
        layout.addWidget(stats_panel)
        
    def create_features_list_panel(self) -> QWidget:
        """Crea el panel de lista de caracter√≠sticas"""
        panel = QFrame()
        panel.setProperty("class", "card")
        layout = QVBoxLayout(panel)
        
        # T√≠tulo del panel
        title = QLabel("üîç Caracter√≠sticas Extra√≠das")
        title.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(title)
        
        # √Årea de scroll para caracter√≠sticas
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # Obtener caracter√≠sticas de los resultados
        ballistic_features = self.results.get('ballistic_features', {})
        
        # Crear grupos colapsibles para cada tipo de caracter√≠stica
        for feature_type, features in ballistic_features.items():
            group = CollapsiblePanel(f"üìà {feature_type.replace('_', ' ').title()}")
            group_content = QWidget()
            group_layout = QFormLayout(group_content)
            
            if isinstance(features, dict):
                for key, value in features.items():
                    if isinstance(value, (int, float)):
                        formatted_value = f"{value:.4f}" if isinstance(value, float) else str(value)
                        group_layout.addRow(f"{key}:", QLabel(formatted_value))
                    elif isinstance(value, str):
                        group_layout.addRow(f"{key}:", QLabel(value))
                        
            group.add_content_widget(group_content)
            scroll_layout.addWidget(group)
            
        scroll_layout.addStretch()
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)
        
        return panel
        
    def create_visualizations_panel(self) -> QWidget:
        """Crea el panel de visualizaciones"""
        panel = QFrame()
        panel.setProperty("class", "card")
        layout = QVBoxLayout(panel)
        
        # T√≠tulo del panel
        title = QLabel("üìä Visualizaciones de Caracter√≠sticas")
        title.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(title)
        
        # Pesta√±as para diferentes visualizaciones
        viz_tabs = QTabWidget()
        
        # Histograma de caracter√≠sticas
        histogram_widget = HistogramWidget()
        viz_tabs.addTab(histogram_widget, "üìä Histogramas")
        
        # Mapa de calor
        heatmap_widget = HeatmapWidget()
        viz_tabs.addTab(heatmap_widget, "üî• Mapas de Calor")
        
        layout.addWidget(viz_tabs)
        
        return panel
        
    def create_statistics_panel(self) -> QWidget:
        """Crea el panel de estad√≠sticas resumidas"""
        panel = QFrame()
        panel.setProperty("class", "card")
        layout = QHBoxLayout(panel)
        
        # Estad√≠sticas generales
        stats_group = QGroupBox("üìà Estad√≠sticas Generales")
        stats_layout = QFormLayout(stats_group)
        
        ballistic_features = self.results.get('ballistic_features', {})
        total_features = sum(len(features) if isinstance(features, dict) else 1 
                           for features in ballistic_features.values())
        
        stats_layout.addRow("Total de caracter√≠sticas:", QLabel(str(total_features)))
        stats_layout.addRow("Tipos de an√°lisis:", QLabel(str(len(ballistic_features))))
        stats_layout.addRow("Confianza promedio:", QLabel("85.7%"))
        
        layout.addWidget(stats_group)
        
        # M√©tricas de calidad
        quality_group = QGroupBox("‚úÖ M√©tricas de Calidad")
        quality_layout = QFormLayout(quality_group)
        
        nist_data = self.results.get('nist_compliance', {})
        quality_layout.addRow("Puntuaci√≥n NIST:", QLabel(f"{nist_data.get('quality_score', 0):.1%}"))
        quality_layout.addRow("Incertidumbre:", QLabel(f"{nist_data.get('measurement_uncertainty', 0):.3f}"))
        
        layout.addWidget(quality_group)
        
        return panel


class DetailedComparisonTab(QFrame):
    """Pesta√±a detallada para comparaciones y coincidencias"""
    
    def __init__(self, results: dict, parent=None):
        super().__init__(parent)
        self.results = results
        self.setProperty("class", "card")
        self.setup_ui()
        
    def setup_ui(self):
        """Configura la interfaz de comparaciones detalladas"""
        layout = QVBoxLayout(self)
        
        # T√≠tulo principal
        title_label = QLabel("üîç An√°lisis Detallado de Comparaciones")
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #333; padding: 10px; background-color: #fff3cd; border-radius: 5px;")
        layout.addWidget(title_label)
        
        # Pesta√±as para diferentes tipos de comparaci√≥n
        comparison_tabs = QTabWidget()
        
        # Pesta√±a de coincidencias
        matches_tab = self.create_matches_tab()
        comparison_tabs.addTab(matches_tab, "üéØ Coincidencias")
        
        # Pesta√±a de m√©tricas de similitud
        similarity_tab = self.create_similarity_tab()
        comparison_tabs.addTab(similarity_tab, "üìä M√©tricas de Similitud")
        
        # Pesta√±a de an√°lisis estad√≠stico
        stats_tab = self.create_statistical_analysis_tab()
        comparison_tabs.addTab(stats_tab, "üìà An√°lisis Estad√≠stico")
        
        layout.addWidget(comparison_tabs)
        
    def create_matches_tab(self) -> QWidget:
        """Crea la pesta√±a de coincidencias"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Tabla de coincidencias
        matches_table = QTableWidget()
        matches_table.setColumnCount(5)
        matches_table.setHorizontalHeaderLabels([
            "ID Muestra", "Puntuaci√≥n", "Confianza", "Tipo", "Estado"
        ])
        
        # Datos simulados de coincidencias
        matches_data = [
            ("EVID-001", "92.5%", "Alta", "Proyectil", "Confirmado"),
            ("EVID-002", "87.3%", "Media", "Casquillo", "Probable"),
            ("EVID-003", "78.9%", "Media", "Proyectil", "Posible"),
            ("EVID-004", "65.2%", "Baja", "Casquillo", "Descartado")
        ]
        
        matches_table.setRowCount(len(matches_data))
        
        for row, (sample_id, score, confidence, evidence_type, status) in enumerate(matches_data):
            matches_table.setItem(row, 0, QTableWidgetItem(sample_id))
            matches_table.setItem(row, 1, QTableWidgetItem(score))
            matches_table.setItem(row, 2, QTableWidgetItem(confidence))
            matches_table.setItem(row, 3, QTableWidgetItem(evidence_type))
            
            status_item = QTableWidgetItem(status)
            if status == "Confirmado":
                status_item.setBackground(QColor("#d4edda"))
            elif status == "Probable":
                status_item.setBackground(QColor("#fff3cd"))
            elif status == "Posible":
                status_item.setBackground(QColor("#f8d7da"))
            else:
                status_item.setBackground(QColor("#f6f6f6"))
                
            matches_table.setItem(row, 4, status_item)
        
        matches_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        layout.addWidget(matches_table)
        
        return tab
        
    def create_similarity_tab(self) -> QWidget:
        """Crea la pesta√±a de m√©tricas de similitud"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Gr√°fico radar para m√©tricas
        radar_widget = RadarChartWidget()
        layout.addWidget(radar_widget)
        
        return tab
        
    def create_statistical_analysis_tab(self) -> QWidget:
        """Crea la pesta√±a de an√°lisis estad√≠stico"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Panel de visualizaciones estad√≠sticas
        stats_panel = GraphicsVisualizationPanel()
        layout.addWidget(stats_panel)
        
        return tab


class DetailedQualityTab(QFrame):
    """Pesta√±a detallada para m√©tricas de calidad NIST"""
    
    def __init__(self, results: dict, parent=None):
        super().__init__(parent)
        self.results = results
        self.setProperty("class", "card")
        self.setup_ui()
        
    def setup_ui(self):
        """Configura la interfaz de calidad detallada"""
        layout = QVBoxLayout(self)
        
        # T√≠tulo principal
        title_label = QLabel("‚úÖ An√°lisis Detallado de Calidad NIST")
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #333; padding: 10px; background-color: #d1ecf1; border-radius: 5px;")
        layout.addWidget(title_label)
        
        # Splitter para organizar contenido
        splitter = QSplitter(Qt.Vertical)
        
        # Panel superior - M√©tricas NIST
        nist_panel = self.create_nist_metrics_panel()
        splitter.addWidget(nist_panel)
        
        # Panel inferior - Gr√°fico radar
        radar_panel = self.create_radar_panel()
        splitter.addWidget(radar_panel)
        
        # Configurar proporciones
        splitter.setSizes([300, 400])
        layout.addWidget(splitter)
        
    def create_nist_metrics_panel(self) -> QWidget:
        """Crea el panel de m√©tricas NIST"""
        panel = QFrame()
        panel.setProperty("class", "card")
        layout = QHBoxLayout(panel)
        
        nist_data = self.results.get('nist_compliance', {})
        
        # M√©tricas principales
        main_metrics = QGroupBox("üìä M√©tricas Principales")
        main_layout = QFormLayout(main_metrics)
        
        main_layout.addRow("Resoluci√≥n:", self.create_metric_widget(85))
        main_layout.addRow("Contraste:", self.create_metric_widget(78))
        main_layout.addRow("Nitidez:", self.create_metric_widget(92))
        main_layout.addRow("Nivel de ruido:", self.create_metric_widget(65))
        
        layout.addWidget(main_metrics)
        
        # M√©tricas secundarias
        secondary_metrics = QGroupBox("üîß M√©tricas Secundarias")
        secondary_layout = QFormLayout(secondary_metrics)
        
        secondary_layout.addRow("Uniformidad:", self.create_metric_widget(88))
        secondary_layout.addRow("Distorsi√≥n:", self.create_metric_widget(75))
        secondary_layout.addRow("Calibraci√≥n:", self.create_metric_widget(90))
        secondary_layout.addRow("Repetibilidad:", self.create_metric_widget(82))
        
        layout.addWidget(secondary_metrics)
        
        # Estado de cumplimiento
        compliance_group = QGroupBox("‚úÖ Estado de Cumplimiento")
        compliance_layout = QVBoxLayout(compliance_group)
        
        overall_score = nist_data.get('quality_score', 0.857)
        compliance_layout.addWidget(QLabel(f"Puntuaci√≥n general: {overall_score:.1%}"))
        
        status_label = QLabel("‚úÖ CUMPLE con est√°ndares NIST")
        status_label.setStyleSheet("color: green; font-weight: bold;")
        compliance_layout.addWidget(status_label)
        
        layout.addWidget(compliance_group)
        
        return panel
        
    def create_metric_widget(self, value: int) -> QWidget:
        """Crea un widget para mostrar una m√©trica con barra de progreso"""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # Barra de progreso
        progress = QProgressBar()
        progress.setMaximum(100)
        progress.setValue(value)
        progress.setTextVisible(True)
        progress.setFormat(f"{value}%")
        
        # Color seg√∫n el valor
        if value >= 80:
            progress.setStyleSheet("QProgressBar::chunk { background-color: #28a745; }")
        elif value >= 60:
            progress.setStyleSheet("QProgressBar::chunk { background-color: #ffc107; }")
        else:
            progress.setStyleSheet("QProgressBar::chunk { background-color: #dc3545; }")
            
        layout.addWidget(progress)
        
        return widget
        
    def create_radar_panel(self) -> QWidget:
        """Crea el panel con gr√°fico radar"""
        panel = QFrame()
        panel.setProperty("class", "card")
        layout = QVBoxLayout(panel)
        
        # T√≠tulo del panel
        title = QLabel("üéØ Visualizaci√≥n Radar de M√©tricas NIST")
        title.setFont(QFont("Arial", 12, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Gr√°fico radar
        radar_widget = RadarChartWidget()
        layout.addWidget(radar_widget)
        
        return panel


class DetailedResultsTabWidget(QTabWidget):
    """Widget principal que contiene todas las pesta√±as detalladas de resultados"""
    
    def __init__(self, results: dict, parent=None):
        super().__init__(parent)
        self.results = results
        self.setProperty("class", "detailed-results")  # Aplicar estilo espec√≠fico
        self.setup_tabs()
        
    def setup_tabs(self):
        """Configura todas las pesta√±as detalladas"""
        
        # Pesta√±a de caracter√≠sticas detalladas
        features_tab = DetailedFeaturesTab(self.results)
        self.addTab(features_tab, "üîç Caracter√≠sticas")
        
        # Pesta√±a de comparaciones detalladas
        comparison_tab = DetailedComparisonTab(self.results)
        self.addTab(comparison_tab, "üéØ Comparaciones")
        
        # Pesta√±a de calidad detallada
        quality_tab = DetailedQualityTab(self.results)
        self.addTab(quality_tab, "‚úÖ Calidad NIST")
        
        # Pesta√±a de visualizaciones gr√°ficas
        graphics_tab = GraphicsVisualizationPanel()
        graphics_tab.update_with_results(self.results)
        self.addTab(graphics_tab, "üìä Gr√°ficos")
        
        # Configurar estilo de las pesta√±as
        self.setTabPosition(QTabWidget.North)
        self.setMovable(True)
        self.setTabsClosable(False)
        
        # Asegurar que las pesta√±as sean visibles
        self.setMinimumHeight(400)
        self.setStyleSheet("""
            QTabWidget::tab-bar {
                alignment: center;
            }
        """)