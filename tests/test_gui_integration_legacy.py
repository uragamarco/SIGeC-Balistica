#!/usr/bin/env python3
"""
Test de integraci√≥n GUI - Backend
Verifica que la interfaz gr√°fica funcione correctamente con el backend
"""

import sys
import os
import tempfile
import numpy as np
from PIL import Image
import cv2
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QTimer
from PyQt5.QtTest import QTest
from PyQt5.QtCore import Qt

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from gui.main_window import MainWindow
from config.unified_config import get_unified_config

class GUIIntegrationTest:
    def __init__(self):
        self.app = None
        self.main_window = None
        self.temp_files = []
        
    def setup(self):
        """Configurar el entorno de prueba"""
        print("üîß Configurando entorno de prueba GUI...")
        
        # Crear aplicaci√≥n Qt
        if not QApplication.instance():
            self.app = QApplication(sys.argv)
        else:
            self.app = QApplication.instance()
            
        # Crear ventana principal
        config = get_unified_config()
        self.main_window = MainWindow(config)
        
        print("   ‚úì Aplicaci√≥n Qt creada")
        print("   ‚úì Ventana principal inicializada")
        
    def create_test_image(self, name_prefix="test_gui"):
        """Crear imagen de prueba"""
        # Crear imagen sint√©tica con patrones
        img = np.zeros((600, 800, 3), dtype=np.uint8)
        
        # Agregar patrones geom√©tricos
        cv2.rectangle(img, (100, 100), (300, 200), (255, 255, 255), -1)
        cv2.circle(img, (500, 300), 80, (128, 128, 128), -1)
        cv2.line(img, (200, 400), (600, 500), (200, 200, 200), 5)
        
        # Agregar ruido para caracter√≠sticas
        noise = np.random.randint(0, 50, img.shape, dtype=np.uint8)
        img = cv2.add(img, noise)
        
        # Guardar imagen temporal
        temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False, prefix=name_prefix)
        temp_path = temp_file.name
        temp_file.close()
        
        pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        pil_img.save(temp_path)
        
        self.temp_files.append(temp_path)
        return temp_path
        
    def test_gui_startup(self):
        """Test 1: Verificar que la GUI se inicie correctamente"""
        print("\n1. Probando inicio de GUI...")
        
        try:
            # Mostrar ventana
            self.main_window.show()
            
            # Procesar eventos pendientes
            self.app.processEvents()
            
            # Verificar que la ventana est√© visible
            assert self.main_window.isVisible(), "La ventana principal no est√° visible"
            
            # Verificar componentes principales
            # Los tabs se crean din√°micamente, verificar por √≠ndice
            tab_count = self.main_window.tab_widget.count()
            assert tab_count > 0, "No se encontraron tabs en la ventana principal"
            
            # Verificar que hay al menos 3 tabs (procesamiento, comparaci√≥n, base de datos, reportes)
            assert tab_count >= 3, f"Se esperaban al menos 3 tabs, encontrados: {tab_count}"
            
            print("   ‚úì Ventana principal visible")
            print("   ‚úì Todos los tabs presentes")
            print("   ‚úì GUI iniciada correctamente")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error en inicio de GUI: {e}")
            return False
            
    def test_image_loading(self):
        """Test 2: Verificar carga de im√°genes en la GUI"""
        print("\n2. Probando carga de im√°genes...")
        
        try:
            # Crear imagen de prueba
            test_image = self.create_test_image("gui_load_test")
            print(f"   - Imagen de prueba creada: {os.path.basename(test_image)}")
            
            # Buscar el tab de im√°genes (ahora se llama "Procesamiento")
            image_tab = None
            for i in range(self.main_window.tab_widget.count()):
                tab = self.main_window.tab_widget.widget(i)
                tab_text = self.main_window.tab_widget.tabText(i)
                print(f"   - Tab {i}: '{tab_text}'")
                if "Procesamiento" in tab_text or "Imagen" in tab_text or "Image" in tab_text:
                    image_tab = tab
                    break
            
            if image_tab is None:
                print("   ‚ùå No se encontr√≥ el tab de im√°genes/procesamiento")
                return False
            
            # Verificar que tiene m√©todos de carga
            if hasattr(image_tab, 'load_image'):
                # Probar carga con imagen de prueba
                result = image_tab.load_image(test_image)
                if result:
                    print("   ‚úì Carga de imagen exitosa")
                    return True
                else:
                    print("   ‚ùå Fallo en la carga de imagen")
                    return False
            elif hasattr(image_tab, 'add_image'):
                # Probar con m√©todo alternativo
                result = image_tab.add_image(test_image)
                if result:
                    print("   ‚úì Carga de imagen exitosa (m√©todo add_image)")
                    return True
                else:
                    print("   ‚ùå Fallo en la carga de imagen (m√©todo add_image)")
                    return False
            else:
                print("   ‚ùå No se encontraron m√©todos de carga de imagen")
                print(f"   - M√©todos disponibles: {[m for m in dir(image_tab) if not m.startswith('_')]}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error en carga de imagen: {e}")
            return False
            
    def test_database_interaction(self):
        """Test 3: Verificar interacci√≥n con base de datos desde GUI"""
        print("\n3. Probando interacci√≥n con base de datos...")
        
        try:
            # Buscar el tab de base de datos (normalmente el tercero)
            db_tab = None
            for i in range(self.main_window.tab_widget.count()):
                tab = self.main_window.tab_widget.widget(i)
                tab_text = self.main_window.tab_widget.tabText(i)
                if 'Base de Datos' in tab_text or 'Database' in tab_text:
                    db_tab = tab
                    break
            
            if db_tab is None:
                print("   ‚ö† Tab de base de datos no encontrado")
                return False
            
            # Verificar que el tab tenga acceso a la base de datos
            if hasattr(db_tab, 'get_database_stats'):
                # Probar obtenci√≥n de estad√≠sticas
                stats = db_tab.get_database_stats()
                if stats is not None:
                    print("   ‚úì Estad√≠sticas de base de datos obtenidas")
                    print(f"   - Total de casos: {stats.get('total_cases', 0)}")
                    print(f"   - Total de im√°genes: {stats.get('total_images', 0)}")
                else:
                    print("   ‚ùå No se pudieron obtener estad√≠sticas")
                    return False
            elif hasattr(db_tab, 'get_database_connection'):
                # Probar conexi√≥n a base de datos
                db_conn = db_tab.get_database_connection()
                if db_conn is not None:
                    print("   ‚úì Conexi√≥n a base de datos establecida")
                else:
                    print("   ‚ùå No se pudo establecer conexi√≥n a base de datos")
                    return False
            elif hasattr(db_tab, 'db_manager'):
                db_manager = db_tab.db_manager
                
                # Verificar estad√≠sticas
                stats = db_manager.get_statistics()
                print(f"   - Total de im√°genes en BD: {stats.get('total_images', 0)}")
                print(f"   - Total de casos en BD: {stats.get('total_cases', 0)}")
            else:
                print("   ‚ö† Tab de BD no tiene m√©todos de base de datos")
                return True  # No es error cr√≠tico
            
            # Procesar eventos
            self.app.processEvents()
            
            print("   ‚úì Interacci√≥n con base de datos funcional")
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error en interacci√≥n con BD: {e}")
            return False
            
    def test_processing_pipeline(self):
        """Test 4: Verificar pipeline de procesamiento desde GUI"""
        print("\n4. Probando pipeline de procesamiento...")
        
        try:
            # Crear imagen de prueba
            test_image = self.create_test_image("gui_process_test")
            print(f"   - Imagen de prueba creada: {os.path.basename(test_image)}")
            
            # Acceder al procesador desde la ventana principal
            if hasattr(self.main_window, 'processor'):
                processor = self.main_window.processor
                
                # Cargar y procesar imagen
                img = cv2.imread(test_image)
                if img is not None:
                    # Preprocesar
                    result = processor.preprocess_image(img)
                    print(f"   - Imagen preprocesada: {result.processed_image.shape}")
                    
                    # Extraer caracter√≠sticas
                    features = processor.extract_all_features(result.processed_image, ['orb'])
                    print(f"   - Caracter√≠sticas extra√≠das: {len(features['keypoints'])}")
                    
            # Procesar eventos
            self.app.processEvents()
            
            print("   ‚úì Pipeline de procesamiento funcional")
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error en pipeline de procesamiento: {e}")
            return False
            
    def test_gui_responsiveness(self):
        """Test 5: Verificar que la GUI responda correctamente"""
        print("\n5. Probando responsividad de GUI...")
        
        try:
            # Cambiar entre tabs
            tab_widget = self.main_window.tab_widget
            
            for i in range(tab_widget.count()):
                tab_widget.setCurrentIndex(i)
                self.app.processEvents()
                QTest.qWait(100)  # Esperar 100ms
                
            print(f"   ‚úì Navegaci√≥n entre {tab_widget.count()} tabs funcional")
            
            # Verificar que la ventana responda a eventos
            self.main_window.resize(900, 700)
            self.app.processEvents()
            QTest.qWait(100)
            
            print("   ‚úì Redimensionamiento funcional")
            print("   ‚úì GUI responde correctamente")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error en responsividad: {e}")
            return False
            
    def cleanup(self):
        """Limpiar archivos temporales"""
        print("\n6. Limpiando archivos temporales...")
        
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
                    print(f"   ‚úì Eliminado: {os.path.basename(temp_file)}")
            except Exception as e:
                print(f"   ‚ö† Error eliminando {temp_file}: {e}")
                
        # Cerrar ventana
        if self.main_window:
            self.main_window.close()
            
    def run_all_tests(self):
        """Ejecutar todos los tests de integraci√≥n GUI"""
        print("=== INICIANDO TESTS DE INTEGRACI√ìN GUI ===")
        
        tests = [
            ("Inicio de GUI", self.test_gui_startup),
            ("Carga de im√°genes", self.test_image_loading),
            ("Interacci√≥n con BD", self.test_database_interaction),
            ("Pipeline de procesamiento", self.test_processing_pipeline),
            ("Responsividad GUI", self.test_gui_responsiveness)
        ]
        
        results = []
        
        for test_name, test_func in tests:
            try:
                result = test_func()
                results.append((test_name, result))
            except Exception as e:
                print(f"üí• ERROR CR√çTICO en {test_name}: {e}")
                results.append((test_name, False))
                
        # Limpiar
        self.cleanup()
        
        # Resumen de resultados
        print("\n=== RESUMEN DE TESTS GUI ===")
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úì PAS√ì" if result else "‚ùå FALL√ì"
            print(f"{status}: {test_name}")
            if result:
                passed += 1
                
        print(f"\nResultado final: {passed}/{total} tests pasaron")
        
        if passed == total:
            print("üéâ TODOS LOS TESTS DE GUI PASARON CORRECTAMENTE")
            return True
        else:
            print("‚ö† ALGUNOS TESTS DE GUI FALLARON")
            return False

def main():
    """Funci√≥n principal"""
    try:
        # Crear y ejecutar tests
        test = GUIIntegrationTest()
        test.setup()
        
        # Ejecutar tests con timeout
        success = test.run_all_tests()
        
        return 0 if success else 1
        
    except Exception as e:
        print(f"üí• ERROR CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())